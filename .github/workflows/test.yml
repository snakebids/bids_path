# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test workflow

on:
  push:
  pull_request:

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: pronovic/setup-poetry@v1
        with:
          version: "1.5.1"
          plugins: "poetry-dynamic-versioning"
          cache-venv: "true"
          cache-poetry: "true"
      - name: Install Project
        run: poetry install --no-interaction

      #----------------------------------------------
      #       run python style checks
      #----------------------------------------------
      - name: isort
        run: poetry run isort bids_path -c
      - name: Black
        run: poetry run black bids_path --check
      - name: ruff
        run: poetry run ruff bids_path
      - name: pyright
        run: poetry run pyright bids_path

  test:
    runs-on: ubuntu-latest
    needs: [ 'quality'  ]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: pronovic/setup-poetry@v1
      with:
        version: "1.5.1"
        cache-venv: "true"
        cache-poetry: "true"
    - name: Install Project
      run: poetry install --no-interaction

    - name: Test with pytest
      env:
        HYPOTHESIS_PROFILE: pr
      run: |
        poetry run pytest --doctest-modules --ignore=docs --benchmark-disable

  deployment_on_base:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event_name, 'pull_request') }}
    steps:
      - name: Check for previous deployment on base
        run: |
          [[ $(
            curl https://api.github.com/repos/${{ github.repository }}/releases |
            jq '.[].target_commitish == "${{ github.event.pull_request.base.ref }}"' |
            grep true | wc -l
          ) != 0 ]]
