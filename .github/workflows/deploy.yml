name: Deploy workflow

on:
  workflow_dispatch:
    inputs:
      comments:
        description: "Comments"
        required: false

jobs:
  release_changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Print author
        run: |
          echo "Author: ${{ github.triggering_actor }}"
          echo "Comments: ${{ github.event.inputs.comments }}"

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}"
        id: extract_branch

      - uses: actions/checkout@master
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Draft change log
        uses: release-drafter/release-drafter@v5
        id: release-drafter
        with:
          commitish: ${{ steps.extract_branch.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Set new release version
        id: release-version
        env:
          RD_RELEASE: ${{ steps.release-drafter.outputs.name }}
        run: |
          if [ ! -z "$RD_RELEASE" ]; then
            echo "new_release=$RD_RELEASE" >> $GITHUB_OUTPUT
          else
            echo "new_release=0.1.0" >> $GITHUB_OUTPUT
          fi

      - name: Publish change log
        uses: release-drafter/release-drafter@v5
        with:
          commitish: ${{ steps.extract_branch.outputs.branch }}
          publish: true
          name: ${{ steps.release-version.outputs.new_release }}
          tag: "v${{ steps.release-version.outputs.new_release }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [release_changelog]

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}"
        id: extract_branch

      - uses: actions/checkout@master
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Poetry
        uses: pronovic/setup-poetry@v1
        with:
          version: "1.5.1"
          plugins: "poetry-dynamic-versioning"
          cache-poetry: "true"

      - name: Build and publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish --build
